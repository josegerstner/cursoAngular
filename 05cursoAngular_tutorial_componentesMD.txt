Curso de Angular de: Angular.io

Componentes Master/Detail:
Por el momento, HeroesComponent muestra tanto la lista de héroes como los detalles del 
héroe seleccionado.
Mantener todas las características en un componente a medida que crece la aplicación no 
será mantenible. Deberá dividir los componentes grandes en subcomponentes más pequeños, 
cada uno centrado en una tarea o flujo de trabajo específico.
En esta página, darás el primer paso en esa dirección al mover los detalles del héroe a 
un lugar separado y reutilizable HeroDetailComponent.
El HeroesComponent solo presentará la lista de héroes. 
El HeroDetailComponent presentará los detalles de un héroe seleccionado.

Hacer el HeroDetailComponent:
Use Angular CLI para generar un nuevo componente nombrado hero-detail.
    ng generate component hero-detail
El comando andamia los archivos HeroDetailComponent y declara el componente en AppModule.

Escriba la plantilla:
Corta el HTML para el detalle del héroe desde la parte inferior de la plantilla HeroesComponent 
y pégalo sobre la plantilla HeroDetailComponent repetitiva generada en la plantilla.
El HTML pegado se refiere a a selectedHero. Lo nuevo HeroDetailComponent puede presentar 
cualquier héroe, no solo un héroe seleccionado. Reemplace "selectedHero" por "hero" en todas 
partes en la plantilla.
Cuando haya terminado, la plantilla HeroDetailComponent debería verse así:
src/app/hero-detail/hero-detail.component.html:
<div *ngIf="hero">
  <h2>{{ hero.name | uppercase }} Details</h2>
  <div><span>id: </span>{{hero.id}}</div>
  <div>
    <label>name:
      <input [(ngModel)]="hero.name" placeholder="name"/>
    </label>
  </div>
</div>

Agregue la propiedad @Input() del héroe:
La plantilla HeroDetailComponent se une a la propiedad hero del componente que es de tipo Hero.
Abra el archivo de clase HeroDetailComponent e importe el símbolo Hero.
src/app/hero-detail/hero-detail.component.ts (import Hero):
    import { Hero } from '../hero';
La propiedad hero debe ser una propiedad de entrada, anotada con el decorador @Input(), porque 
el HeroesComponent externo se enlazará de esta manera.
    <app-hero-detail [hero]="selectedHero"></app-hero-detail>
Modifíquese la declaración de importación @angular/core para incluir el símbolo Input.
src/app/hero-detail/hero-detail.component.ts (entrada de importación):
    import { Component, OnInit, Input } from '@angular/core';
Agregue una propiedad hero, precedida por el decorador @Input().
    @Input() hero: Hero;
Ese es el único cambio que debes hacer a la clase HeroDetailComponent. No hay más propiedades 
No hay lógica de presentación. Este componente simplemente recibe un objeto héroe a través de 
su propiedad hero y lo muestra.

Mostrar el HeroDetailComponent:
El HeroesComponent sigue siendo una vista Master/Detail.
Solía ​​mostrar los detalles del héroe por sí mismo, antes de cortar esa parte de la plantilla. 
Ahora delegará en el HeroDetailComponent.
Los dos componentes tendrán una relación padre/hijo. El padre HeroesComponent controlará al 
niño HeroDetailComponent enviándole un nuevo héroe para mostrar cuando el usuario seleccione 
un héroe de la lista.
No cambiarás la HeroesComponent clase pero cambiarás su plantilla .

Actualiza la plantilla HeroesComponent:
El selector HeroDetailComponent es 'app-hero-detail'. Agregue un elemento <app-hero-detail> 
cerca de la parte inferior de la plantilla HeroesComponent, donde solía estar la vista de 
detalles del héroe.
heroes.component.html (enlace de HeroDetail):
    <app-hero-detail [hero]="selectedHero"></app-hero-detail>
[hero]="selectedHero" es un enlace de propiedad de Angular.
Es un enlace de datos unidireccional desde la propiedad selectedHero de HeroesComponent 
hasta la propiedad hero del elemento de destino, que se asigna a la propiedad hero de 
HeroDetailComponent.
Ahora cuando el usuario hace clic en un héroe en la lista, el selectedHero cambia. 
Cuando se realizan selectedHero los cambios, la propiedad hero se actualiza y HeroDetailComponent
muestra el nuevo héroe.
La plantilla HeroesComponent revisada debería verse así:
heroes.component.html:
    <h2>My Heroes</h2>
    <ul class="heroes">
    <li *ngFor="let hero of heroes"
        [class.selected]="hero === selectedHero"
        (click)="onSelect(hero)">
        <span class="badge">{{hero.id}}</span> {{hero.name}}
    </li>
    </ul>
    <app-hero-detail [hero]="selectedHero"></app-hero-detail>
El navegador se actualiza y la aplicación vuelve a funcionar como lo hacía antes.

¿Qué cambió? 
Como antes, cada vez que un usuario hace clic en un nombre de héroe, el detalle del 
héroe aparece debajo de la lista de héroes. Ahora el HeroDetailComponent está presentando 
esos detalles en lugar del HeroesComponent.
Refactorizar el original HeroesComponent en dos componentes produce beneficios, tanto ahora 
como en el futuro:
1. Usted simplificó HeroesComponent al reducir sus responsabilidades.
2. Puede convertir HeroDetailComponent en un rico editor de héroes sin tocar al padre HeroesComponent.
3. Puede evolucionar HeroesComponent sin tocar la vista de detalle del héroe.
4. Puede reutilizar el HeroDetailComponent en la plantilla de algún componente futuro.

Revisión del código final:
Aquí están los archivos de código discutidos en esta página y su aplicación debería verse así: 
ejemplo en vivo: https://angular.io/generated/live-examples/toh-pt3/stackblitz.html
ejemplo de descarga: https://angular.io/generated/zips/toh-pt3/toh-pt3.zip

Resumen:
- Usted creó un HeroDetailComponent separado, reutilizable.
- Usaste un enlace de propiedad para darle al padre HeroesComponent control sobre el niño 
    HeroDetailComponent.
- Usaste el decorador @Input para hacer que la propiedad hero esté disponible para ser 
    encuadernada por el HeroesComponent externo.